import json
import boto3
import os, io
import requests
from configparser import ConfigParser
import datatier
from fpdf import FPDF

def create_pdf(content):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    # Add each line of content to the PDF
    for line in content.split("\n"):
        pdf.cell(200, 10, txt=line, ln=True)
    return pdf.output(dest='S')


def upload_to_s3(filepath, bucket_name, s3_key):
    s3_client = boto3.client('s3')
    #s3_client.upload_fileobj(filepath, bucket_name, s3_key)

def lambda_handler(event, context):
    try:
        print("**STARTING**")
        
        # Setup AWS based on config file
        config_file = 'recipeapp-config.ini'
        os.environ['AWS_SHARED_CREDENTIALS_FILE'] = config_file
        
        configur = ConfigParser()
        configur.read(config_file)
        
        # Configure for RDS access
        rds_endpoint = configur.get('rds', 'endpoint')
        rds_portnum = int(configur.get('rds', 'port_number'))
        rds_username = configur.get('rds', 'user_name')
        rds_pwd = configur.get('rds', 'user_pwd')
        rds_dbname = configur.get('rds', 'db_name')

        # Extract recipe from event
        if "pathParameters" in event:
            if "recipeid" in event["pathParameters"]:
                recipeid = event["pathParameters"].get("recipeid")
            else:
                raise ValueError("Path parameters are missing")

        # Query TheMealDB API
        print(f"Fetching recipe by recipeID: {recipeid}")
        url = f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={recipeid}"
        print("url:", url)       
        res = requests.get(url)
        body = res.json().get("meals")
        ingredientslist = []

        # go thorugh each ingredient in recipe
        for i in range(1,21):
            name = "strIngredient" + str(i)
            ingredient = body[0].get(name)
            if ingredient != "" and ingredient is not None:
                ingredientslist.append(ingredient)

        mealname = body[0].get("strMeal")
        instructions = body[0].get("strInstructions")

        #creating print recipe
        content = f"Recipe for {mealname}\n\nInstructions:\n{instructions}\n\nIngredients:\n"
        content += "\n".join([f"- {ingredient}" for ingredient in ingredientslist])

        print("**Creating PDF**")
        pdf_filename = 'myfileobj'
        print("PDF_filename ", pdf_filename)
        pdf_buff = create_pdf(content)
        #print(pdf_buff)
        print("**Uploading PDF to S3**")

        bucket_name = configur.get('s3', 'bucket_name')
        print("bucket_name ", bucket_name)

        s3_key = pdf_filename
        print("s3_key ", s3_key)

        # bucket.download_file()
        upload_to_s3(io.BytesIO(bytes(pdf_buff, 'utf-8')), bucket_name, s3_key)
        
        s3_url = f"https://photoapp-cs310-gracefayeyang.s3.amazonaws.com/{s3_key}"

        print("**DONE, Returning Success**")
        
        return {
        'statusCode': 200,
        'body': ''
        }

    except Exception as err:
        print("**ERROR**", str(err))
        return {
            'statusCode': 500,
            'body': json.dumps({"error": str(err)})
        }

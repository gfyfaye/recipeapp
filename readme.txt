Overview: 
RecipeApp is an innovative recipe generator that tailors recipe suggestions to users’ preferences and dietary restrictions. By integrating with multiple APIs, RecipeApp dynamically filters recipes based on user-provided data, such as allergies, and offers additional features such as estimating grocery costs and generating downloadable “.txt” versions of recipes. Designed for curious food enthusiasts, RecipeApp helps users discover exciting new meals while prioritizing their safety and convenience. 
Architecture: 

RecipeApp uses a serverless architecture with AWS API Gateway and Lambda Functions to deliver scalable and cost-efficient functionality; the client interacts with the web server via API Gateway. The Lambda Functions handle all computations, including fetching recipes from TheMealDB API, which provides the functionality of generating recipes based on inputs. It also prompts OpenAI to generate cost estimations given a list of ingredients for a recipe. Furthermore, the functions interact with the recipeapp database, which stores user, allergy, and recipe data.

Database: 
The recipeapp database contains three tables: users, recipes, and allergies. The “users” table contains a unique primary key “userid” along with the fields “firstname” and “lastname”. The “recipes” table has the unique primary key “recipeid” and fields “recipename” and “mealdbid”, both of which are retrieved from TheMealDB; it also has the field “assetname” for the name of the “.txt” file of the recipe that is 
saved to the user’s local computer from S3. The “allergies” table has the unique primary key “allergyid” and the foreign key “userid” which maps the allergy to the user; it also contains the field “allergyname”. 

Non-Trivial Functions:
The getRecipe function takes in a userid of an existing user in the database and a category from the list provided by TheMealDB API. The function interacts with the API by first fetching a random recipe in the selected category. It then cross-checks every ingredient from that recipe with the user’s allergies, which are collected from the database. If the recipe contains an allergy, it is skipped and a new one is fetched and processed in the same way. If a successful recipe is found, the recipe’s name, instructions, and ingredients, as provided by the API, are printed to the console and its id and name are stored in the database for the user to access in the future. 
The getRecipeCost function first takes in a TheMealDB id of an existing recipe in the database and fetches that recipe’s ingredients from TheMealDB API. Then, it sends that list of ingredients and a prompt to OpenAI API which returns the estimated unit price of each ingredient in the format specified in the prompt. The returned information is not stored but printed to the console. 
The downloadRecipePDF function takes in a TheMealDB id of an existing recipe in the database, searches for more detailed information about that specific recipe from TheMealDB API, and records the recipe’s name, ingredients, measurements, and instructions onto a “.txt” file named after the recipe’s name. That “.txt” file is then uploaded into the user’s s3 and then their local computer, and the “assetname” field of the recipe is updated in the database with the “.txt” file name. Note that the name of the function was based off of its original functionality which was to produce a PDF. It was later altered to save to a “.txt” file. 

Trivial Functions:
In addition to the non-trivial functions described above, RecipeApp provides other trivial functions to the user that are necessary to the convenience and usability of the application. There is an addUser function which allows the user to input a first and last name to create a user that is then inserted into the database. The getAllUsers function then returns a list of all users currently in the database as well as their allergies. Similarly, the getAllRecipes function returns a list of all recipes currently in the database. Next, the addAllergy function takes in a userid and however many allergies the user would like to add, one at a time, and inserts those allergies into the database, associating them with that specific user. 

link to demo video: https://youtu.be/Jb7doRJbT4Q